//
//  HomeWorker.swift
//  iOS-intern-assignment
//
//  Created by Pasika Pongsawaluk on 2/2/2568 BE.
//  Copyright (c) 2568 BE ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

struct PhotoResponse: Decodable {
    let currentPage: Int
    let totalPages: Int
    let totalItems: Int
    let feature: String
    let photos: [Photo]
    
    enum CodingKeys: String, CodingKey {
        case currentPage = "current_page"
        case totalPages = "total_pages"
        case totalItems = "total_items"
        case feature = "feature"
        case photos = "photos"
    }
}

struct Photo: Decodable {
    let imageUrl: [String]
    let name: String
    let description: String
    let positiveVotesCount: Int
    
    enum CodingKeys: String, CodingKey {
        case imageUrl = "image_url"
        case name = "name"
        case description = "description"
        case positiveVotesCount = "positive_votes_count"
    }
}

extension URLSession {
    func fetchData(at url: URL, completion: @escaping (Result<PhotoResponse, Error>) -> Void) {
        self.dataTask(with: url) { (data, response, error) in
            if let error = error {
                completion(.failure(error))
            }
            
            if let data = data {
                do {
                    let response = try JSONDecoder().decode(PhotoResponse.self, from: data)
                    completion(.success(response))
                } catch let decoderError {
                    completion(.failure(decoderError))
                }
            }
        }.resume()
    }
}

class HomeWorker
{
    func fetchData(completion: @escaping (PhotoResponse) -> Void) {
        let url = URL(string: "https://api.500px.com/v1/photos?feature=popular&page=1")!
        URLSession.shared.fetchData(at: url) { result in
            switch result {
            case .success(let response):
                completion(response)
            case .failure(let error):
                break
            }
        }
    }
}
